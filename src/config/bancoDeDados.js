require('dotenv').config(); // Carrega as vari√°veis de ambiente do arquivo .env
const { Sequelize } = require('sequelize');

// URI do banco de dados obtida das vari√°veis de ambiente
const databaseUri = process.env.DATABASE_URI;

// Cria uma inst√¢ncia do Sequelize com a URI do banco de dados e configura√ß√µes adicionais
const sequelize = new Sequelize(databaseUri, {
    dialect: 'postgres', // Define o dialect como PostgreSQL
    logging: false, // Desativa logs de SQL no console
});

// Testa a conex√£o com o banco de dados, configura o schema e sincroniza os modelos
sequelize.authenticate()
    .then(() => {
        console.log('üìö Conex√£o com o banco de dados estabelecida...'); // Mensagem de sucesso na conex√£o
        return sequelize.query('SET search_path TO biblioteca'); // Configura o schema padr√£o para "biblioteca"
    })
    .then(() => {
        console.log('‚úÖ Schema configurado para "biblioteca"'); // Mensagem de sucesso na configura√ß√£o do schema
        return sequelize.sync({ force: true }); // Sincroniza os modelos com o banco de dados, alterando as tabelas conforme necess√°rio
    })
    .then(() => {
        console.log('üîÑ Modelos sincronizados com o banco de dados'); // Mensagem de sucesso na sincroniza√ß√£o dos modelos
    })
    .catch(err => {
        console.error('‚ùå Erro ao configurar o banco de dados:', err); // Mensagem de erro na configura√ß√£o do banco de dados
    });

// Exporta a inst√¢ncia do Sequelize para ser utilizada em outras partes do c√≥digo
module.exports = sequelize;