require('dotenv').config(); // Carrega as vari√°veis de ambiente do arquivo .env
const { Sequelize } = require('sequelize');

// URI do banco de dados obtida das vari√°veis de ambiente
const databaseUri = process.env.DATABASE_URI;

// Cria uma inst√¢ncia do Sequelize com a URI do banco de dados e configura√ß√µes adicionais
const sequelize = new Sequelize(databaseUri, {
    dialect: 'postgres', // Define o dialect como PostgreSQL
    logging: false, // Desativa logs de SQL no console
});

// Fun√ß√£o ass√≠ncrona para testar a conex√£o, criar o schema se n√£o existir, configurar o schema e sincronizar os modelos
const conectarBancoDeDados = async () => {
    try {
        // Testa a conex√£o com o banco de dados
        await sequelize.authenticate();
        console.log('üìö Conex√£o com o banco de dados estabelecida...'); // Mensagem de sucesso na conex√£o

        // Cria o schema "biblioteca" se n√£o existir
        await sequelize.query('CREATE SCHEMA IF NOT EXISTS biblioteca');
        console.log('‚úÖ Schema "biblioteca" criado ou j√° existente'); // Mensagem de sucesso na cria√ß√£o do schema

        // Configura o schema padr√£o para "biblioteca"
        await sequelize.query('SET search_path TO biblioteca');
        console.log('‚úÖ Schema configurado para "biblioteca"'); // Mensagem de sucesso na configura√ß√£o do schema

        // Sincroniza os modelos com o banco de dados, alterando as tabelas conforme necess√°rio
        await sequelize.sync({ alter: true });
        console.log('üîÑ Modelos sincronizados com o banco de dados'); // Mensagem de sucesso na sincroniza√ß√£o dos modelos
    } catch (err) {
        console.error('‚ùå Erro ao configurar o banco de dados:', err); // Mensagem de erro na configura√ß√£o do banco de dados
    }
};

// Chama a fun√ß√£o para conectar ao banco de dados
conectarBancoDeDados();

// Exporta a inst√¢ncia do Sequelize para ser utilizada em outras partes do c√≥digo
module.exports = sequelize;